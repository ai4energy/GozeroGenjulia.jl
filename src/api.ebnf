const gozero_grammar_spec = raw"""
// 参见go-zero的api规范网页 https://go-zero.dev/docs/tutorials

api            = SyntaxStmt | InfoStmt | { ImportStmt } | { TypeStmt } | { ServiceStmt } .

Syntax         = { Production } .
Production     = production_name "=" [ Expression ] "." .
Expression     = Term { "|" Term } .
Term           = Factor { Factor } .
Factor         = production_name | token [ "…" token ] | Group | Option | Repetition .
Group          = "(" Expression ")" .
Option         = "[" Expression "]" .
Repetition     = "{" Expression "}" .


number         = "0"..."9" .
lower_letter   = "a"..."z" .

letter         = "A"..."Z" | "a"..."z" | "_" .
decimal_digit  = "0" … "9" .

SyntaxStmt     = "syntax" "=" "v1" .

InfoStmt       = "info" "(" { InfoKeyValueExpr } ")" .
InfoKeyValueExpr = InfoKeyLit [ interpreted_string_lit ] .
InfoKeyLit     = identifier ":" .

ImportStmt     = ImportLiteralStmt | ImportGroupStmt .
ImportLiteralStmt = "import" interpreted_string_lit .
ImportGroupStmt   = "import" "(" { interpreted_string_lit } ")" .

TypeStmt       = TypeLiteralStmt | TypeGroupStmt .
TypeLiteralStmt   = "type" TypeExpr .
TypeGroupStmt     = "type" "(" { TypeExpr } ")" .
TypeExpr          = identifier [ "=" ] DataType .
DataType          = AnyDataType | ArrayDataType | BaseDataType | InterfaceDataType | MapDataType | PointerDataType | SliceDataType | StructDataType .

AnyDataType       = "any" .
ArrayDataType     = "[" { decimal_digit } "]" DataType .
BaseDataType      = "bool" | "uint8" | "uint16" | "uint32" | "uint64" | "int8" | "int16" | "int32" | "int64" | "float32" | "float64" | "complex64" | "complex128" | "string" | "int" | "uint" | "uintptr" | "byte" | "rune" | "any" .
InterfaceDataType = "interface{}" .
MapDataType       = "map" "[" DataType "]" DataType .
PointerDataType   = "*" DataType .
SliceDataType     = "[" "]" DataType .
StructDataType    = "{" { ElemExpr } "}" .

ElemExpr          = [ ElemNameExpr ] DataType [ Tag ].
ElemNameExpr      = identifier { "," identifier } .
Tag               = raw_string_lit .

ServiceStmt     = [ AtServerStmt ] "service" ServiceNameExpr "(" { ServiceItemStmt } ")" .
ServiceNameExpr = identifier [ "-api" ] .
AtServerStmt    = "@server" "(" { AtServerKVExpr } ")" .
AtServerKVExpr  = AtServerKeyLit [ AtServerValueLit ] .
AtServerKeyLit  = identifier ":" .
AtServerValueLit = PathLit | identifier { "," identifier } .
PathLit         = `"` { "/" { identifier | "-" identifier} } `"` .
ServiceItemStmt = [ AtDocStmt ] AtHandlerStmt RouteStmt .

AtDocStmt       = AtDocLiteralStmt | AtDocGroupStmt .
AtDocLiteralStmt = "@doc" interpreted_string_lit .
AtDocGroupStmt  = "@doc" "(" { AtDocKVExpr } ")" .
AtDocKVExpr     = AtServerKeyLit interpreted_string_lit .

AtHandlerStmt   = "@handler" identifier .
RouteStmt       = Method PathExpr [ BodyStmt ] [ "returns" ] [ BodyStmt ].
Method          = "get" | "head" | "post" | "put" | "patch" | "delete" | "connect" | "options" | "trace" .
PathExpr        = "/" identifier { ( "-" identifier ) | ( ":" identifier) } .
BodyStmt        = "(" identifier ")" .

identifier            = letter { letter | decimal_digit | "_" } .
interpreted_string_lit = "\"" { any_character_except_quote | escape_sequence } "\"" .
raw_string_lit        = "`" { any_character_except_backtick } "`" .

letter                = "A"..."Z" | "a"..."z" | "_" .
decimal_digit         = "0" ... "9" .

escape_sequence       = "\\" ("n" | "t" | "\"" | "\\" | ...) ; 
"""